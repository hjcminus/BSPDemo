/*==============================================================================
  BSPDemo
  Keys.cpp
================================================================================
*/

#include "Precompiled.h"
#pragma hdrstop

int Key_KeyStrToID(const char * keystr)
{
#define STR_TO_ID_CHECK(KEYID) if (!_stricmp(#KEYID, keystr)) return KEYID;

    STR_TO_ID_CHECK(KEY_ESCAPE)
    STR_TO_ID_CHECK(KEY_F1)
    STR_TO_ID_CHECK(KEY_F2)
    STR_TO_ID_CHECK(KEY_F3)
    STR_TO_ID_CHECK(KEY_F4)
    STR_TO_ID_CHECK(KEY_F5)
    STR_TO_ID_CHECK(KEY_F6)
    STR_TO_ID_CHECK(KEY_F7)
    STR_TO_ID_CHECK(KEY_F8)
    STR_TO_ID_CHECK(KEY_F9)
    STR_TO_ID_CHECK(KEY_F10)
    STR_TO_ID_CHECK(KEY_F11)
    STR_TO_ID_CHECK(KEY_F12)
    STR_TO_ID_CHECK(KEY_NUMLOCK)
    STR_TO_ID_CHECK(KEY_TILDE)
    STR_TO_ID_CHECK(KEY_0)
    STR_TO_ID_CHECK(KEY_1)
    STR_TO_ID_CHECK(KEY_2)
    STR_TO_ID_CHECK(KEY_3)
    STR_TO_ID_CHECK(KEY_4)
    STR_TO_ID_CHECK(KEY_5)
    STR_TO_ID_CHECK(KEY_6)
    STR_TO_ID_CHECK(KEY_7)
    STR_TO_ID_CHECK(KEY_8)
    STR_TO_ID_CHECK(KEY_9)
    STR_TO_ID_CHECK(KEY_A)
    STR_TO_ID_CHECK(KEY_B)
    STR_TO_ID_CHECK(KEY_C)
    STR_TO_ID_CHECK(KEY_D)
    STR_TO_ID_CHECK(KEY_E)
    STR_TO_ID_CHECK(KEY_F)
    STR_TO_ID_CHECK(KEY_G)
    STR_TO_ID_CHECK(KEY_H)
    STR_TO_ID_CHECK(KEY_I)
    STR_TO_ID_CHECK(KEY_J)
    STR_TO_ID_CHECK(KEY_K)
    STR_TO_ID_CHECK(KEY_L)
    STR_TO_ID_CHECK(KEY_M)
    STR_TO_ID_CHECK(KEY_N)
    STR_TO_ID_CHECK(KEY_O)
    STR_TO_ID_CHECK(KEY_P)
    STR_TO_ID_CHECK(KEY_Q)
    STR_TO_ID_CHECK(KEY_R)
    STR_TO_ID_CHECK(KEY_S)
    STR_TO_ID_CHECK(KEY_T)
    STR_TO_ID_CHECK(KEY_U)
    STR_TO_ID_CHECK(KEY_V)
    STR_TO_ID_CHECK(KEY_W)
    STR_TO_ID_CHECK(KEY_X)
    STR_TO_ID_CHECK(KEY_Y)
    STR_TO_ID_CHECK(KEY_Z)
    STR_TO_ID_CHECK(KEY_NUMPAD_0)
    STR_TO_ID_CHECK(KEY_NUMPAD_1)
    STR_TO_ID_CHECK(KEY_NUMPAD_2)
    STR_TO_ID_CHECK(KEY_NUMPAD_3)
    STR_TO_ID_CHECK(KEY_NUMPAD_4)
    STR_TO_ID_CHECK(KEY_NUMPAD_5)
    STR_TO_ID_CHECK(KEY_NUMPAD_6)
    STR_TO_ID_CHECK(KEY_NUMPAD_7)
    STR_TO_ID_CHECK(KEY_NUMPAD_8)
    STR_TO_ID_CHECK(KEY_NUMPAD_9)
    STR_TO_ID_CHECK(KEY_NUMPAD_ADD)
    STR_TO_ID_CHECK(KEY_NUMPAD_SUBTRACT)
    STR_TO_ID_CHECK(KEY_NUMPAD_MULTIPLY)
    STR_TO_ID_CHECK(KEY_NUMPAD_DIVIDE)
    STR_TO_ID_CHECK(KEY_NUMPAD_DECIMAL)
    STR_TO_ID_CHECK(KEY_NUMPAD_SEPARATOR)
    STR_TO_ID_CHECK(VK_ADD)
    STR_TO_ID_CHECK(VK_SUBTRACT)
    STR_TO_ID_CHECK(VK_MULTIPLY)
    STR_TO_ID_CHECK(VK_DIVIDE)
    STR_TO_ID_CHECK(VK_DECIMAL)
    STR_TO_ID_CHECK(VK_SEPARATOR)
    STR_TO_ID_CHECK(KEY_TAB)
    STR_TO_ID_CHECK(KEY_CAPSLOCK)
    STR_TO_ID_CHECK(KEY_SHIFT)
    STR_TO_ID_CHECK(KEY_CTRL)
    STR_TO_ID_CHECK(KEY_ALT)
    STR_TO_ID_CHECK(KEY_LWIN)
    STR_TO_ID_CHECK(KEY_RWIN)
    STR_TO_ID_CHECK(KEY_BACKSPACE)
    STR_TO_ID_CHECK(KEY_SPACE)
    STR_TO_ID_CHECK(KEY_ENTER)
    STR_TO_ID_CHECK(KEY_MINUS)
    STR_TO_ID_CHECK(KEY_PLUS)
    STR_TO_ID_CHECK(KEY_SEMICOLON)
    STR_TO_ID_CHECK(KEY_COMMA)
    STR_TO_ID_CHECK(KEY_PERIOD)
    STR_TO_ID_CHECK(KEY_FORWARDSLASH)
    STR_TO_ID_CHECK(KEY_BACKSLASH)
    STR_TO_ID_CHECK(KEY_QUOTE)
    STR_TO_ID_CHECK(KEY_OPENBRACKET)
    STR_TO_ID_CHECK(KEY_CLOSEBRACKET)
    STR_TO_ID_CHECK(KEY_INSERT)
    STR_TO_ID_CHECK(KEY_DELETE)
    STR_TO_ID_CHECK(KEY_HOME)
    STR_TO_ID_CHECK(KEY_END)
    STR_TO_ID_CHECK(KEY_PAGEUP)
    STR_TO_ID_CHECK(KEY_PAGEDOWN)
    STR_TO_ID_CHECK(KEY_UP)
    STR_TO_ID_CHECK(KEY_DOWN)
    STR_TO_ID_CHECK(KEY_LEFT)
    STR_TO_ID_CHECK(KEY_RIGHT)

    return 0;
}

keys_s keys;

void Key_Init()
{
    keys.moveforward  = KEY_UP;
    keys.movebackward = KEY_DOWN;
    keys.moveleft     = KEY_LEFT;
    keys.moveright    = KEY_RIGHT;
}

int Key_InitMoveForwardKey(const char * keystr)
{
    return Key_KeyStrToID(keystr);
}

int Key_InitMoveBackwardKey(const char * keystr)
{
    return Key_KeyStrToID(keystr);
}

int Key_InitMoveLeftKey(const char * keystr)
{
    return Key_KeyStrToID(keystr);
}

int Key_InitMoveRightKey(const char * keystr)
{
    return Key_KeyStrToID(keystr);
}
